/*
 * Copyright 2014 Michał Rudewicz.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pl.prv.rrrekin.pbi;

import java.awt.Dimension;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import pl.prv.rrrekin.pbi.models.SearchResultModel;

/**
 * <p>
 * MainWindow class.</p>
 *
 * @author Michał Rudewicz
 * @version $Id: $Id
 */
public class MainWindow extends javax.swing.JDialog {

    private static final ResourceBundle guiTexts = ResourceBundle.getBundle("pl/prv/rrrekin/pbi/gui");
    private List<PbiBookEntry> searchResult = new ArrayList<>();
    private static final long serialVersionUID = 1L;
    private SearchResultModel resultTableModel = new SearchResultModel(searchResult);
    private final Log logger = LogFactory.getLog(this.getClass());

    /**
     * Creates new form MainWindow
     *
     * @param parent a {@link java.awt.Frame} object.
     * @param modal a boolean.
     */
    public MainWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        this.setPreferredSize(new Dimension(prefs.getInt("w", 400), prefs.getInt("h", 300)));
        initComponents();
        resultTable.getColumnModel().getColumn(0).setPreferredWidth(prefs.getInt("c1", 150));
        resultTable.getColumnModel().getColumn(1).setPreferredWidth(prefs.getInt("c2", 150));
        getRootPane().setDefaultButton(searchButton);
        try {
            logger.info("Started. Using URL " + Configuration.getInstance().getServerBaseUrl());
        } catch (IOException ex) {
            logger.error(ex.getLocalizedMessage());
            JOptionPane.showMessageDialog(null, guiTexts.getString("CONFIG_FILE_ERROR") + "\n" + ex.getLocalizedMessage(),
                    guiTexts.getString("CONFIG_ERROR"), JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pbiSearcher = new pl.prv.rrrekin.pbi.PbiSearch();
        searchAuthor = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        searchTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        downloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        mFileConfig = new javax.swing.JMenuItem();
        mFileExit = new javax.swing.JMenuItem();
        mConfig = new javax.swing.JMenu();
        mClearAllCache = new javax.swing.JMenuItem();
        mHelp = new javax.swing.JMenu();
        mAbout = new javax.swing.JMenuItem();
        mChangelog = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Klient PBI"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        searchAuthor.setName("searchAuthor"); // NOI18N

        searchButton.setText(guiTexts.getString("SEARCH")); // NOI18N
        searchButton.setName("searchButton"); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        resultTable.setModel(resultTableModel);
        resultTable.setName("resultTable"); // NOI18N
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultTable);

        searchTitle.setName("searchTitle"); // NOI18N

        jLabel2.setText(guiTexts.getString("AUTHOR")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(guiTexts.getString("TITLE")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        downloadButton.setText(guiTexts.getString("DOWNLOAD")); // NOI18N
        downloadButton.setName("downloadButton"); // NOI18N
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        mFile.setText(guiTexts.getString("M_FILE")); // NOI18N
        mFile.setName("mFile"); // NOI18N

        mFileConfig.setText(guiTexts.getString("M_FILE_CONFIG")); // NOI18N
        mFileConfig.setName("mFileConfig"); // NOI18N
        mFileConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFileConfigActionPerformed(evt);
            }
        });
        mFile.add(mFileConfig);

        mFileExit.setText(guiTexts.getString("M_FILE_EXIT")); // NOI18N
        mFileExit.setName("mFileExit"); // NOI18N
        mFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFileExitActionPerformed(evt);
            }
        });
        mFile.add(mFileExit);

        jMenuBar1.add(mFile);

        mConfig.setText(guiTexts.getString("M_EDIT")); // NOI18N
        mConfig.setName("mConfig"); // NOI18N

        mClearAllCache.setText(guiTexts.getString("CLEAR_ALL_CACHE")); // NOI18N
        mClearAllCache.setName("mClearAllCache"); // NOI18N
        mClearAllCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mClearAllCacheActionPerformed(evt);
            }
        });
        mConfig.add(mClearAllCache);

        jMenuBar1.add(mConfig);

        mHelp.setText(guiTexts.getString("HELP")); // NOI18N
        mHelp.setName("mHelp"); // NOI18N

        mAbout.setText(guiTexts.getString("ABOUT")); // NOI18N
        mAbout.setName("mAbout"); // NOI18N
        mAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAboutActionPerformed(evt);
            }
        });
        mHelp.add(mAbout);

        mChangelog.setText(guiTexts.getString("CHANGELOG")); // NOI18N
        mChangelog.setName("mChangelog"); // NOI18N
        mChangelog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mChangelogActionPerformed(evt);
            }
        });
        mHelp.add(mChangelog);

        jMenuBar1.add(mHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchTitle)
                            .addComponent(searchAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(downloadButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mFileConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFileConfigActionPerformed
        ConfigWindow dialog = new ConfigWindow(this, true);
        dialog.setLocationByPlatform(true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_mFileConfigActionPerformed

    private void mFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFileExitActionPerformed
        this.setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_mFileExitActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        progressBar.setIndeterminate(true);
        searchButton.setEnabled(false);
        searchAuthor.setEditable(false);
        searchTitle.setEnabled(false);
        resultTable.setEnabled(false);

        (new SwingWorker<List<PbiBookEntry>, Void>() {

            @Override
            protected List<PbiBookEntry> doInBackground() throws Exception {
                return pbiSearcher.searchByAuthor(searchAuthor.getText(), searchTitle.getText());
            }

            @Override
            protected void done() {
                try {
                    searchResult = get();
                } catch (Exception ex) {
                    logger.error("Fetch error",ex);
                    JOptionPane.showMessageDialog(null, guiTexts.getString("FETCH_ERROR") +"\n"+ex.getLocalizedMessage(),
                            guiTexts.getString("CONFIG_ERROR"), JOptionPane.ERROR_MESSAGE
                    );
                }
                resultTableModel.setBackingList(searchResult);
                progressBar.setIndeterminate(false);
                searchButton.setEnabled(true);
                searchAuthor.setEditable(true);
                searchTitle.setEnabled(true);
                resultTable.setEnabled(true);
                resultTableModel.tableChanged();
            }
        }).execute();

//            resultTable.repaint();

    }//GEN-LAST:event_searchButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());

        prefs.putInt("w", this.getWidth());
        prefs.putInt("h", this.getHeight());
        prefs.putInt("c1", resultTable.getColumnModel().getColumn(0).getWidth());
        prefs.putInt("c2", resultTable.getColumnModel().getColumn(1).getWidth());
    }//GEN-LAST:event_formWindowClosing

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed

        downloadBook();
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void downloadBook() {
        int id;
        String title;
        int i = resultTable.getSelectedRow();
        if (i < 0) {
            return;
        }
        try {
            id = (Integer) resultTable.getValueAt(i, 2);
            title = "\"" + resultTable.getValueAt(i, 1) + "\", " + resultTable.getValueAt(i, 0);
            DownloadWindow dialog = new DownloadWindow(this, true, id, title);
            dialog.setLocationByPlatform(true);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
        } catch (Exception ex) {
            logger.warn("Ubanable to get selected book.", ex);
        }
    }

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked

        if (evt.getClickCount() >= 2) {
            downloadBook();
        }

    }//GEN-LAST:event_resultTableMouseClicked

    private void mAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAboutActionPerformed
        About dialog = new About(this, true);
        dialog.setLocationByPlatform(true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mAboutActionPerformed

    private void mClearAllCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mClearAllCacheActionPerformed

        int resp = JOptionPane.showConfirmDialog(this, guiTexts.getString("SURE_TO_CLEAR_CACHE"), guiTexts.getString(
                "CLEAR_ALL_CACHE"),
                JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.YES_OPTION) {
            for (File file : Util.CACHE_DIR.listFiles(new FileFilter() {

                @Override
                public boolean accept(File pathname) {
                    return !(pathname.equals(Util.CONFIG_FILE));
                }
            })) {
                if (file.isDirectory()) {
                    removeDir(file);
                } else {
                    file.delete();
                }
            }
            Util.CACHE_IMAGES.mkdirs();
        }
    }//GEN-LAST:event_mClearAllCacheActionPerformed

    private void mChangelogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mChangelogActionPerformed
        Changelog dialog = new Changelog(this, true);
        dialog.setLocationByPlatform(true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mChangelogActionPerformed

    private void removeDir(File path) {
        for (File f : path.listFiles()) {
            if (f.isDirectory()) {
                removeDir(f);
            } else {
                f.delete();
            }
        }
        path.delete();
    }

    private JPanel loadingPanel() {
        JPanel panel = new JPanel();
        BoxLayout layoutMgr = new BoxLayout(panel, BoxLayout.PAGE_AXIS);
        panel.setLayout(layoutMgr);

        ClassLoader cldr = this.getClass().getClassLoader();
        java.net.URL imageURL = cldr.getResource("pl/prv/rrrekin/pbi/loading.gif");
        ImageIcon imageIcon = new ImageIcon(imageURL);
        JLabel iconLabel = new JLabel();
        iconLabel.setIcon(imageIcon);
        imageIcon.setImageObserver(iconLabel);

        JLabel label = new JLabel(guiTexts.getString("LOADING"));
        panel.add(iconLabel);
        panel.add(label);
        return panel;
    }

    /**
     * <p>
     * main.</p>
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) { //NOI18N
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow dialog = new MainWindow(new javax.swing.JFrame(), true);
                dialog.setLocationByPlatform(true);

                if (dialog.getLocale().getLanguage().equals(new Locale("pl").getLanguage())) {
                    UIManager.getDefaults().addResourceBundle("pl.prv.rrrekin.pbi.swing");
                }

                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mAbout;
    private javax.swing.JMenuItem mChangelog;
    private javax.swing.JMenuItem mClearAllCache;
    private javax.swing.JMenu mConfig;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuItem mFileConfig;
    private javax.swing.JMenuItem mFileExit;
    private javax.swing.JMenu mHelp;
    private pl.prv.rrrekin.pbi.PbiSearch pbiSearcher;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable resultTable;
    private javax.swing.JTextField searchAuthor;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTitle;
    // End of variables declaration//GEN-END:variables
}
