/*
 * Copyright 2014 Michał Rudewicz.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pl.prv.rrrekin.pbi;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author Michał Rudewicz
 */
public class DownloadWindow extends javax.swing.JDialog {

    private final int bookId;
    private final String bookTitle;
    private static final ResourceBundle guiTexts = ResourceBundle.getBundle("pl/prv/rrrekin/pbi/gui");
    private final Log logger = LogFactory.getLog(this.getClass());

    /**
     * Creates new form DownloadWindow
     */
    public DownloadWindow(JDialog parent, boolean modal, int bookId, String name) {
        super(parent, modal);
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        this.setPreferredSize(new Dimension(prefs.getInt("w", 400), prefs.getInt("h", 400)));
        setTitle(name);
        this.bookId = bookId;
        this.bookTitle = name;
        initComponents();
        downloadButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        downloader = new pl.prv.rrrekin.pbi.BookDownloader(bookId);
        useCache = new javax.swing.JCheckBox();
        downloadButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        authorName = new javax.swing.JTextField();
        titleField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        depagination = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        previewArea = new javax.swing.JTextPane();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 392));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        useCache.setText(guiTexts.getString("USE_CACHE")); // NOI18N
        useCache.setName("useCache"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${usingCache}"), useCache, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        downloadButton.setText(guiTexts.getString("DOWNLOAD_AGAIN")); // NOI18N
        downloadButton.setName("downloadButton"); // NOI18N
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        progressBar.setEnabled(false);
        progressBar.setName("progressBar"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${pagesGot}/${pageCount}"), progressBar, org.jdesktop.beansbinding.BeanProperty.create("string"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${not indeterminated}"), progressBar, org.jdesktop.beansbinding.BeanProperty.create("stringPainted"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${indeterminated}"), progressBar, org.jdesktop.beansbinding.BeanProperty.create("indeterminate"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${pageCount}"), progressBar, org.jdesktop.beansbinding.BeanProperty.create("maximum"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${pagesGot}"), progressBar, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jLabel1.setText(guiTexts.getString("AUTHOR")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        authorName.setName("authorName"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${author}"), authorName, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${finished}"), authorName, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        titleField.setEditable(false);
        titleField.setName("titleField"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${title}"), titleField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText(guiTexts.getString("JOINING_PAGES")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        depagination.setModel(new DefaultComboBoxModel(Depagination.localValues()));
        depagination.setName("depagination"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${depagination}"), depagination, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${finished}"), depagination, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        depagination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depaginationActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        previewArea.setName("previewArea"); // NOI18N
        jScrollPane1.setViewportView(previewArea);

        cancelButton.setText(guiTexts.getString("CANCEL")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText(guiTexts.getString("SAVE")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloader, org.jdesktop.beansbinding.ELProperty.create("${finished}"), saveButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(titleField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useCache)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(downloadButton))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depagination, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useCache)
                    .addComponent(downloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(authorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(depagination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        downloader.setCancel(true);
        while (downloadWorker != null && !(downloadWorker.isDone() || downloadWorker.isCancelled())) {
            try {
                Thread.sleep(30);
            } catch (InterruptedException ex) {
            }
        }
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());

        prefs.putInt("w", this.getWidth());
        prefs.putInt("h", this.getHeight());
    }//GEN-LAST:event_formWindowClosing

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        downloadWorker
                = new SwingWorker<Void, Void>() {
                    Exception failure = null;

                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            downloader.download(useCache.isSelected());
                        } catch (Exception ex) {
                            failure = ex;
                        }
                        return null;
                    }

                    @Override
                    protected void done() {
//                System.out.println("DONE");
                        if (failure != null) {
                            if (failure instanceof IOException) {
                                logger.warn(guiTexts.getString("FETCH_ERROR"), failure);
                                JOptionPane.showMessageDialog(null, guiTexts.getString("FETCH_ERROR"),
                                        failure.getCause() == null ? failure.getLocalizedMessage() :
                                        failure.getLocalizedMessage() + "\n" + failure.getCause().
                                        getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
                            } else {
                                logger.error(guiTexts.getString("UNHANDLED_EXCEPTION"), failure);
                                JOptionPane.showMessageDialog(null, guiTexts.getString("UNHANDLED_EXCEPTION"),
                                        failure.getCause() == null ? failure.getLocalizedMessage() :
                                        failure.getLocalizedMessage() + "\n" + failure.getCause().
                                        getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        doPreviev();
                        useCache.setEnabled(true);
                        downloadButton.setEnabled(true);
                        progressBar.setEnabled(false);
                    }

                };

        useCache.setEnabled(false);
        downloadButton.setEnabled(false);
        progressBar.setEnabled(true);
        downloadWorker.execute();
    }//GEN-LAST:event_downloadButtonActionPerformed
    public SwingWorker<Void, Void> downloadWorker;

    private void depaginationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depaginationActionPerformed
        doPreviev();
    }//GEN-LAST:event_depaginationActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        String saveDir = prefs.get("saveDirectory", System.getProperty("user.dir"));

        final JFileChooser fc = new JFileChooser(new File(saveDir));
        fc.setSelectedFile(new File(saveDir, downloader.getTitle() + ".epub"));
        final FileFilter epubFilter
                = new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        if (pathname.isDirectory()) {
                            return true;
                        }
                        return pathname.getName().toLowerCase().endsWith(".epub");
                    }

                    @Override
                    public String getDescription() {
                        return guiTexts.getString("EPUB_FILE");
                    }
                };
        final FileFilter htmlFilter
                = new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        if (pathname.isDirectory()) {
                            return true;
                        }
                        String lcFileName = pathname.getName().toLowerCase();
                        return lcFileName.endsWith(".html") || lcFileName.endsWith(".htm");
                    }

                    @Override
                    public String getDescription() {
                        return guiTexts.getString("HTML_FILE");
                    }
                };
        fc.addChoosableFileFilter(epubFilter);
        fc.addChoosableFileFilter(htmlFilter);
        fc.setFileFilter(epubFilter);

//        fc.addChoosableFileFilter(new FileFilter() {
//
//            @Override
//            public boolean accept(File pathname) {
//                return true;
//            }
//
//            @Override
//            public String getDescription() {
//                return guiTexts.getString("ALL_FILES");
//            }
//        });
        fc.setAcceptAllFileFilterUsed(true);

//        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                prefs.put("saveDirectory", file.getParent().toString());
                String filename = file.getName().toLowerCase();
                if (filename.endsWith(".html") || filename.endsWith(".html")) {
                    if (file.exists()) {
                        int resp = JOptionPane.showConfirmDialog(this, String.format(guiTexts.
                                getString("FILE_ALREADY_EXISTS"), file.getName()), guiTexts.getString("FILE_EXISTS"),
                                JOptionPane.YES_NO_OPTION);
                        if (resp == JOptionPane.NO_OPTION) {
                            return;
                        }
                    }
                    downloader.exportAsHtml(file);
                } else {
                    if (!filename.endsWith(".epub")) {
                        filename = filename + ".epub";
                    }
                    if (file.exists()) {
                        int resp = JOptionPane.showConfirmDialog(this, String.format(guiTexts.
                                getString("FILE_ALREADY_EXISTS"), file.getName()), guiTexts.getString("FILE_EXISTS"),
                                JOptionPane.YES_NO_OPTION);
                        if (resp == JOptionPane.NO_OPTION) {
                            return;
                        }
                    }
                    downloader.exportAsEpub(file);
                }
            } catch (IOException ex) {
                logger.warn(guiTexts.getString("SAVE_ERROR"), ex);
                JOptionPane.showMessageDialog(this,
                        ex.getCause() == null ? ex.getLocalizedMessage() :
                        ex.getLocalizedMessage() + "\n" + ex.getCause().
                        getLocalizedMessage(), guiTexts.getString("SAVE_ERROR"), JOptionPane.ERROR_MESSAGE);
            }
            dispose();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void doPreviev() {
        if (downloader.getBook() != null && downloader.isFinished()) {
            org.jsoup.nodes.Document doc = downloader.getBook().buildHtml(true);
            previewArea.setContentType("text/html");
            doc.body().attr("style", "font-family: Vardana, Helvetica, sans-serif;font-size: 10pt;");
            if(depagination.getSelectedIndex()==Depagination.VERSE.ordinal()){
                doc.select("p").attr("style","margin:0;text-indent:0;");
            }
            previewArea.setText(doc.html());
            previewArea.setSelectionStart(0);
            previewArea.setSelectionEnd(0);
            System.out.println(doc);
        } else {
            previewArea.setText("");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                DownloadWindow dialog = new DownloadWindow(null, true, 1800, "Title");
                DownloadWindow dialog = new DownloadWindow(null, true, 55466, "Title");
                dialog.setLocationByPlatform(true);

                if (dialog.getLocale().getLanguage().equals(new Locale("pl").getLanguage())) {
                    UIManager.getDefaults().addResourceBundle("pl.prv.rrrekin.pbi.swing");
                }

                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorName;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox depagination;
    private javax.swing.JButton downloadButton;
    private pl.prv.rrrekin.pbi.BookDownloader downloader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane previewArea;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField titleField;
    private javax.swing.JCheckBox useCache;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
